rownames(coefs) <- NULL
return(coefs)
}
return(coef.tbl)
}
####################################################################
# Method to get the site random effects
get_site <- function(model, ...){ UseMethod("get_site") }
get_site.merMod <- function(model, ...){
require(lme4)
# get a data.frame of the random site effects
modran <- lme4::ranef(model, condVar=TRUE)
# internal function to add the std errors to the output
.add_stderr <- function(x){
id <- rownames(x)
bias <- x$`(Intercept)`
vars <- as.vector(attr(x, 'postVar'))
std.err <- sqrt(vars)
return(data.frame(ID=id, Bias=bias, Std.error=std.err))
}
coefs <- .add_stderr(modran[['Station.Name']])
return(coefs)
}
####################################################################
# Method to get the event random effects
get_event <- function(model, ...){ UseMethod("get_event") }
get_event.merMod <- function(model, ...){
require(lme4)
# get a data.frame of the random event effects
modran <- lme4::ranef(model, condVar=TRUE)
# internal function to add the std errors to the output
.add_stderr <- function(x){
id <- rownames(x)
bias <- x$`(Intercept)`
vars <- as.vector(attr(x, 'postVar'))
std.err <- sqrt(vars)
return(data.frame(ID=id, Bias=bias, Std.error=std.err))
}
coefs <- .add_stderr(modran[['Event.ID']])
return(coefs)
}
##############################################################
### Run the models...
## Libraries
require(lme4)
## Make output folders
dir.create(file.path(project_directory, output_folder))
dir.create(file.path(paste(project_directory,output_folder,sep=""), 'R_MEML'))
## Read in file:
db <- read.csv(data_path,sep=",")
for (i_gmml in 1:length(model_name_list))
{
print(i_gmml)
i_model_name <- model_name_list[i_gmml]
print(i_model_name)
## make the formula string, only random effects, the event and site
i_formula_string <- paste(i_model_name, '~ (1|Event.ID) + (1|Station.Name)')
## run the model
i_model <- lme4::lmer(i_formula_string,data=db)
## print it
print(i_model)
## Extract the bias term, the fixed coefficient
fixed_coefs <- get_fixed(i_model)
## get the filepath, write the file
fixed_file <- paste(project_directory,sprintf("%s/R_MEML/",output_folder),location_name,"_fixed_",i_model_name,".txt",sep='')
readr::write_csv(fixed_coefs, path=fixed_file)
message("Fixed coefficients saved to: ", fixed_file)
## Extract the event coefficients:
event_coefs <- get_event(i_model)
## get the filepath, write the file
event_file <- paste(project_directory,sprintf("%s/R_MEML/",output_folder),location_name,"_event_",i_model_name,".txt",sep='')
readr::write_csv(event_coefs, path=event_file)
message("Event coefficients saved to: ", event_file)
## Extract the site coefficients:
site_coefs <- get_site(i_model)
## get the filepath, write the file
site_file <- paste(project_directory,sprintf("%s/R_MEML/",output_folder),location_name,"_site_",i_model_name,".txt",sep='')
readr::write_csv(site_coefs, path=site_file)
message("Site coefficients saved to: ", site_file)
}
## Compute MEML residuals for Zhang Hongcai
#### Parameters ####
# model <- 'acc_2_20'
location_name <- 'California'
## model names:
# model_name_list <- c('lnBoore14_PGA_Res','lnBoore14_PGV_Res','lnBA18_F0.1_Res',
#                      'lnBA18_F1_Res','lnBA18_F5_Res','lnBA18_F10_Res',
#                      'lnBA18_F15_Res','lnBA18_F20_Res','lnBA18_F25_Res')
model_name_list <- c('lnPGA_Res_refVs30','lnPGA_Res_AlanVs30','lnPGA_Res_FumiVs30',
'lnPGV_Res_refVs30','lnPGV_Res_AlanVs30','lnPGV_Res_FumiVs30')
## Project directory:
project_directory <- '/Users/tnye/USGS/fumiyaki/'
output_folder <- 'GMM_residuals'
## Data file:
#data_path <- sprintf('/Users/tnye/USGS/data/GMM_%s.csv', model)
data_path <- '/Users/tnye/Downloads/USGS/data/flatfiles/fumiyaki/GMM_Boore14.csv'
##############################################################
############## Functions needed for mixed effects ##############
# Method to get fixed effects
get_fixed <- function(model, ...){ UseMethod("get_fixed") }
get_fixed.merMod <- function(model, ...){
require(lme4)
# get a data.frame of the fixed effects
coef.tbl <- {
modsum <- summary(model) #Can also use 'fixef' but this doesn't return std errors
coefs <- modsum[['coefficients']]
colnames(coefs) <- c('Estimate','Std.error','t.value')
coefs <- cbind(data.frame(fixed.effect=rownames(coefs)), coefs)
rownames(coefs) <- NULL
return(coefs)
}
return(coef.tbl)
}
####################################################################
# Method to get the site random effects
get_site <- function(model, ...){ UseMethod("get_site") }
get_site.merMod <- function(model, ...){
require(lme4)
# get a data.frame of the random site effects
modran <- lme4::ranef(model, condVar=TRUE)
# internal function to add the std errors to the output
.add_stderr <- function(x){
id <- rownames(x)
bias <- x$`(Intercept)`
vars <- as.vector(attr(x, 'postVar'))
std.err <- sqrt(vars)
return(data.frame(ID=id, Bias=bias, Std.error=std.err))
}
coefs <- .add_stderr(modran[['Station.Name']])
return(coefs)
}
####################################################################
# Method to get the event random effects
get_event <- function(model, ...){ UseMethod("get_event") }
get_event.merMod <- function(model, ...){
require(lme4)
# get a data.frame of the random event effects
modran <- lme4::ranef(model, condVar=TRUE)
# internal function to add the std errors to the output
.add_stderr <- function(x){
id <- rownames(x)
bias <- x$`(Intercept)`
vars <- as.vector(attr(x, 'postVar'))
std.err <- sqrt(vars)
return(data.frame(ID=id, Bias=bias, Std.error=std.err))
}
coefs <- .add_stderr(modran[['Event.ID']])
return(coefs)
}
##############################################################
### Run the models...
## Libraries
require(lme4)
## Make output folders
dir.create(file.path(project_directory, output_folder))
dir.create(file.path(paste(project_directory,output_folder,sep=""), 'R_MEML'))
## Read in file:
db <- read.csv(data_path,sep=",")
for (i_gmml in 1:length(model_name_list))
{
print(i_gmml)
i_model_name <- model_name_list[i_gmml]
print(i_model_name)
## make the formula string, only random effects, the event and site
i_formula_string <- paste(i_model_name, '~ (1|Event.ID) + (1|Station.Name)')
## run the model
i_model <- lme4::lmer(i_formula_string,data=db)
## print it
print(i_model)
## Extract the bias term, the fixed coefficient
fixed_coefs <- get_fixed(i_model)
## get the filepath, write the file
fixed_file <- paste(project_directory,sprintf("%s/R_MEML/",output_folder),location_name,"_fixed_",i_model_name,".txt",sep='')
readr::write_csv(fixed_coefs, path=fixed_file)
message("Fixed coefficients saved to: ", fixed_file)
## Extract the event coefficients:
event_coefs <- get_event(i_model)
## get the filepath, write the file
event_file <- paste(project_directory,sprintf("%s/R_MEML/",output_folder),location_name,"_event_",i_model_name,".txt",sep='')
readr::write_csv(event_coefs, path=event_file)
message("Event coefficients saved to: ", event_file)
## Extract the site coefficients:
site_coefs <- get_site(i_model)
## get the filepath, write the file
site_file <- paste(project_directory,sprintf("%s/R_MEML/",output_folder),location_name,"_site_",i_model_name,".txt",sep='')
readr::write_csv(site_coefs, path=site_file)
message("Site coefficients saved to: ", site_file)
}
## Compute MEML residuals for Zhang Hongcai
#### Parameters ####
# model <- 'acc_2_20'
location_name <- 'California'
## model names:
# model_name_list <- c('lnBoore14_PGA_Res','lnBoore14_PGV_Res','lnBA18_F0.1_Res',
#                      'lnBA18_F1_Res','lnBA18_F5_Res','lnBA18_F10_Res',
#                      'lnBA18_F15_Res','lnBA18_F20_Res','lnBA18_F25_Res')
model_name_list <- c('lnPGA_Res_refVs30','lnPGA_Res_AlanVs30','lnPGA_Res_FumiVs30',
'lnPGV_Res_refVs30','lnPGV_Res_AlanVs30','lnPGV_Res_FumiVs30')
## Project directory:
project_directory <- '/Users/tnye/USGS/fumiyaki/'
output_folder <- 'GMM_residuals'
## Data file:
#data_path <- sprintf('/Users/tnye/USGS/data/GMM_%s.csv', model)
data_path <- '/Users/tnye/Downloads/USGS/data/flatfiles/fumiyaki/GMM_Boore14.csv'
##############################################################
############## Functions needed for mixed effects ##############
# Method to get fixed effects
get_fixed <- function(model, ...){ UseMethod("get_fixed") }
get_fixed.merMod <- function(model, ...){
require(lme4)
# get a data.frame of the fixed effects
coef.tbl <- {
modsum <- summary(model) #Can also use 'fixef' but this doesn't return std errors
coefs <- modsum[['coefficients']]
colnames(coefs) <- c('Estimate','Std.error','t.value')
coefs <- cbind(data.frame(fixed.effect=rownames(coefs)), coefs)
rownames(coefs) <- NULL
return(coefs)
}
return(coef.tbl)
}
####################################################################
# Method to get the site random effects
get_site <- function(model, ...){ UseMethod("get_site") }
get_site.merMod <- function(model, ...){
require(lme4)
# get a data.frame of the random site effects
modran <- lme4::ranef(model, condVar=TRUE)
# internal function to add the std errors to the output
.add_stderr <- function(x){
id <- rownames(x)
bias <- x$`(Intercept)`
vars <- as.vector(attr(x, 'postVar'))
std.err <- sqrt(vars)
return(data.frame(ID=id, Bias=bias, Std.error=std.err))
}
coefs <- .add_stderr(modran[['Station.Name']])
return(coefs)
}
####################################################################
# Method to get the event random effects
get_event <- function(model, ...){ UseMethod("get_event") }
get_event.merMod <- function(model, ...){
require(lme4)
# get a data.frame of the random event effects
modran <- lme4::ranef(model, condVar=TRUE)
# internal function to add the std errors to the output
.add_stderr <- function(x){
id <- rownames(x)
bias <- x$`(Intercept)`
vars <- as.vector(attr(x, 'postVar'))
std.err <- sqrt(vars)
return(data.frame(ID=id, Bias=bias, Std.error=std.err))
}
coefs <- .add_stderr(modran[['Event.ID']])
return(coefs)
}
##############################################################
### Run the models...
## Libraries
require(lme4)
## Make output folders
dir.create(file.path(project_directory, output_folder))
dir.create(file.path(paste(project_directory,output_folder,sep=""), 'R_MEML'))
## Read in file:
db <- read.csv(data_path,sep=",")
for (i_gmml in 1:length(model_name_list))
{
print(i_gmml)
i_model_name <- model_name_list[i_gmml]
print(i_model_name)
## make the formula string, only random effects, the event and site
i_formula_string <- paste(i_model_name, '~ (1|Event.ID) + (1|Station.Name)')
## run the model
i_model <- lme4::lmer(i_formula_string,data=db)
## print it
print(i_model)
## Extract the bias term, the fixed coefficient
fixed_coefs <- get_fixed(i_model)
## get the filepath, write the file
fixed_file <- paste(project_directory,sprintf("%s/R_MEML/",output_folder),location_name,"_fixed_",i_model_name,".txt",sep='')
readr::write_csv(fixed_coefs, path=fixed_file)
message("Fixed coefficients saved to: ", fixed_file)
## Extract the event coefficients:
event_coefs <- get_event(i_model)
## get the filepath, write the file
event_file <- paste(project_directory,sprintf("%s/R_MEML/",output_folder),location_name,"_event_",i_model_name,".txt",sep='')
readr::write_csv(event_coefs, path=event_file)
message("Event coefficients saved to: ", event_file)
## Extract the site coefficients:
site_coefs <- get_site(i_model)
## get the filepath, write the file
site_file <- paste(project_directory,sprintf("%s/R_MEML/",output_folder),location_name,"_site_",i_model_name,".txt",sep='')
readr::write_csv(site_coefs, path=site_file)
message("Site coefficients saved to: ", site_file)
}
## Compute MEML residuals for Zhang Hongcai
#### Parameters ####
# model <- 'acc_2_20'
location_name <- 'California'
## model names:
# model_name_list <- c('lnBoore14_PGA_Res','lnBoore14_PGV_Res','lnBA18_F0.1_Res',
#                      'lnBA18_F1_Res','lnBA18_F5_Res','lnBA18_F10_Res',
#                      'lnBA18_F15_Res','lnBA18_F20_Res','lnBA18_F25_Res')
model_name_list <- c('lnPGA_Res_refVs30','lnPGA_Res_AlanVs30','lnPGA_Res_FumiVs30',
'lnPGV_Res_refVs30','lnPGV_Res_AlanVs30','lnPGV_Res_FumiVs30')
## Project directory:
project_directory <- '/Users/tnye/USGS/fumiyaki/'
output_folder <- 'GMM_residuals'
## Data file:
#data_path <- sprintf('/Users/tnye/USGS/data/GMM_%s.csv', model)
data_path <- '/Users/tnye/Downloads/USGS/data/flatfiles/fumiyaki/GMM_Boore14.csv'
##############################################################
############## Functions needed for mixed effects ##############
# Method to get fixed effects
get_fixed <- function(model, ...){ UseMethod("get_fixed") }
get_fixed.merMod <- function(model, ...){
require(lme4)
# get a data.frame of the fixed effects
coef.tbl <- {
modsum <- summary(model) #Can also use 'fixef' but this doesn't return std errors
coefs <- modsum[['coefficients']]
colnames(coefs) <- c('Estimate','Std.error','t.value')
coefs <- cbind(data.frame(fixed.effect=rownames(coefs)), coefs)
rownames(coefs) <- NULL
return(coefs)
}
return(coef.tbl)
}
####################################################################
# Method to get the site random effects
get_site <- function(model, ...){ UseMethod("get_site") }
get_site.merMod <- function(model, ...){
require(lme4)
# get a data.frame of the random site effects
modran <- lme4::ranef(model, condVar=TRUE)
# internal function to add the std errors to the output
.add_stderr <- function(x){
id <- rownames(x)
bias <- x$`(Intercept)`
vars <- as.vector(attr(x, 'postVar'))
std.err <- sqrt(vars)
return(data.frame(ID=id, Bias=bias, Std.error=std.err))
}
coefs <- .add_stderr(modran[['Station.Name']])
return(coefs)
}
####################################################################
# Method to get the event random effects
get_event <- function(model, ...){ UseMethod("get_event") }
get_event.merMod <- function(model, ...){
require(lme4)
# get a data.frame of the random event effects
modran <- lme4::ranef(model, condVar=TRUE)
# internal function to add the std errors to the output
.add_stderr <- function(x){
id <- rownames(x)
bias <- x$`(Intercept)`
vars <- as.vector(attr(x, 'postVar'))
std.err <- sqrt(vars)
return(data.frame(ID=id, Bias=bias, Std.error=std.err))
}
coefs <- .add_stderr(modran[['Event.ID']])
return(coefs)
}
##############################################################
### Run the models...
## Libraries
require(lme4)
## Make output folders
dir.create(file.path(project_directory, output_folder))
dir.create(file.path(paste(project_directory,output_folder,sep=""), 'R_MEML'))
## Read in file:
db <- read.csv(data_path,sep=",")
for (i_gmml in 1:length(model_name_list))
{
print(i_gmml)
i_model_name <- model_name_list[i_gmml]
print(i_model_name)
## make the formula string, only random effects, the event and site
i_formula_string <- paste(i_model_name, '~ (1|Event.ID) + (1|Station.Name)')
## run the model
i_model <- lme4::lmer(i_formula_string,data=db)
## print it
print(i_model)
## Extract the bias term, the fixed coefficient
fixed_coefs <- get_fixed(i_model)
## get the filepath, write the file
fixed_file <- paste(project_directory,sprintf("%s/R_MEML/",output_folder),location_name,"_fixed_",i_model_name,".txt",sep='')
readr::write_csv(fixed_coefs, path=fixed_file)
message("Fixed coefficients saved to: ", fixed_file)
## Extract the event coefficients:
event_coefs <- get_event(i_model)
## get the filepath, write the file
event_file <- paste(project_directory,sprintf("%s/R_MEML/",output_folder),location_name,"_event_",i_model_name,".txt",sep='')
readr::write_csv(event_coefs, path=event_file)
message("Event coefficients saved to: ", event_file)
## Extract the site coefficients:
site_coefs <- get_site(i_model)
## get the filepath, write the file
site_file <- paste(project_directory,sprintf("%s/R_MEML/",output_folder),location_name,"_site_",i_model_name,".txt",sep='')
readr::write_csv(site_coefs, path=site_file)
message("Site coefficients saved to: ", site_file)
}
## Compute MEML residuals for Zhang Hongcai
#### Parameters ####
# model <- 'acc_2_20'
location_name <- 'California'
## model names:
# model_name_list <- c('lnBoore14_PGA_Res','lnBoore14_PGV_Res','lnBA18_F0.1_Res',
#                      'lnBA18_F1_Res','lnBA18_F5_Res','lnBA18_F10_Res',
#                      'lnBA18_F15_Res','lnBA18_F20_Res','lnBA18_F25_Res')
model_name_list <- c('lnPGA_Res_refVs30','lnPGA_Res_AlanVs30','lnPGA_Res_FumiVs30',
'lnPGV_Res_refVs30','lnPGV_Res_AlanVs30','lnPGV_Res_FumiVs30')
## Project directory:
project_directory <- '/Users/tnye/USGS/fumiyaki/'
output_folder <- 'GMM_residuals'
## Data file:
#data_path <- sprintf('/Users/tnye/USGS/data/GMM_%s.csv', model)
data_path <- '/Users/tnye/Downloads/USGS/data/flatfiles/fumiyaki/GMM_Boore14.csv'
##############################################################
############## Functions needed for mixed effects ##############
# Method to get fixed effects
get_fixed <- function(model, ...){ UseMethod("get_fixed") }
get_fixed.merMod <- function(model, ...){
require(lme4)
# get a data.frame of the fixed effects
coef.tbl <- {
modsum <- summary(model) #Can also use 'fixef' but this doesn't return std errors
coefs <- modsum[['coefficients']]
colnames(coefs) <- c('Estimate','Std.error','t.value')
coefs <- cbind(data.frame(fixed.effect=rownames(coefs)), coefs)
rownames(coefs) <- NULL
return(coefs)
}
return(coef.tbl)
}
####################################################################
# Method to get the site random effects
get_site <- function(model, ...){ UseMethod("get_site") }
get_site.merMod <- function(model, ...){
require(lme4)
# get a data.frame of the random site effects
modran <- lme4::ranef(model, condVar=TRUE)
# internal function to add the std errors to the output
.add_stderr <- function(x){
id <- rownames(x)
bias <- x$`(Intercept)`
vars <- as.vector(attr(x, 'postVar'))
std.err <- sqrt(vars)
return(data.frame(ID=id, Bias=bias, Std.error=std.err))
}
coefs <- .add_stderr(modran[['Station.Name']])
return(coefs)
}
####################################################################
# Method to get the event random effects
get_event <- function(model, ...){ UseMethod("get_event") }
get_event.merMod <- function(model, ...){
require(lme4)
# get a data.frame of the random event effects
modran <- lme4::ranef(model, condVar=TRUE)
# internal function to add the std errors to the output
.add_stderr <- function(x){
id <- rownames(x)
bias <- x$`(Intercept)`
vars <- as.vector(attr(x, 'postVar'))
std.err <- sqrt(vars)
return(data.frame(ID=id, Bias=bias, Std.error=std.err))
}
coefs <- .add_stderr(modran[['Event.ID']])
return(coefs)
}
##############################################################
### Run the models...
## Libraries
require(lme4)
## Make output folders
dir.create(file.path(project_directory, output_folder))
dir.create(file.path(paste(project_directory,output_folder,sep=""), 'R_MEML'))
## Read in file:
db <- read.csv(data_path,sep=",")
for (i_gmml in 1:length(model_name_list))
{
print(i_gmml)
i_model_name <- model_name_list[i_gmml]
print(i_model_name)
## make the formula string, only random effects, the event and site
i_formula_string <- paste(i_model_name, '~ (1|Event.ID) + (1|Station.Name)')
## run the model
i_model <- lme4::lmer(i_formula_string,data=db)
## print it
print(i_model)
## Extract the bias term, the fixed coefficient
fixed_coefs <- get_fixed(i_model)
## get the filepath, write the file
fixed_file <- paste(project_directory,sprintf("%s/R_MEML/",output_folder),location_name,"_fixed_",i_model_name,".txt",sep='')
readr::write_csv(fixed_coefs, path=fixed_file)
message("Fixed coefficients saved to: ", fixed_file)
## Extract the event coefficients:
event_coefs <- get_event(i_model)
## get the filepath, write the file
event_file <- paste(project_directory,sprintf("%s/R_MEML/",output_folder),location_name,"_event_",i_model_name,".txt",sep='')
readr::write_csv(event_coefs, path=event_file)
message("Event coefficients saved to: ", event_file)
## Extract the site coefficients:
site_coefs <- get_site(i_model)
## get the filepath, write the file
site_file <- paste(project_directory,sprintf("%s/R_MEML/",output_folder),location_name,"_site_",i_model_name,".txt",sep='')
readr::write_csv(site_coefs, path=site_file)
message("Site coefficients saved to: ", site_file)
}
